// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Role {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  users User[]
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  fullName        String
  password        String
  role            Role      @relation(fields: [roleId], references: [id])
  roleId          String    @db.ObjectId
  profileImage    String?   @default("/default-profile.jpg")
  isActive        Boolean   @default(true)
  adminDetails    Admin?    @relation("UserToAdmin")
  teacherDetails  Teacher?  @relation("UserToTeacher")
  studentDetails  Student?  @relation("UserToStudent")
  discussions     Discussion[] @relation("UserToDiscussion")
  discussionReplies DiscussionReply[] @relation("UserToDiscussionReply")
  submissions     Submission[]  @relation("UserToSubmission")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  systemLogs      SystemLog[]

  @@index([roleId])
}

model Admin {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  user          User     @relation("UserToAdmin", fields: [userId], references: [id])
  userId        String   @unique @db.ObjectId
  systemSettings SystemSettings[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Teacher {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  user          User     @relation("UserToTeacher", fields: [userId], references: [id])
  userId        String   @unique @db.ObjectId
  specialization String
  bio           String
  gender        String
  courses       Course[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Student {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  user          User     @relation("UserToStudent", fields: [userId], references: [id])
  userId        String   @unique @db.ObjectId
  dateOfBirth   DateTime?
  gender        String?
  enrollments   CourseEnrollment[] @relation("StudentToCourseEnrollment")
  quizAttempts  QuizAttempt[]
  submissions   Submission[]  @relation("StudentToSubmission")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SystemSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String
  value     String
  adminId   String   @db.ObjectId
  admin     Admin    @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId])
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  teacherId   String    @db.ObjectId
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  enrollments CourseEnrollment[]
  lessons     Lesson[]
  category    CourseCategory @relation(fields: [categoryId], references: [id])
  status      String       @default("active")
  categoryId  String         @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lessonCount Int      @default(0)
  studentCount Int     @default(0)

  @@index([categoryId])
  @@index([teacherId])
}

model CourseCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseEnrollment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String    @db.ObjectId
  courseId      String    @db.ObjectId
  student       Student   @relation("StudentToCourseEnrollment", fields: [studentId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  status        String    @default("ACTIVE") // ACTIVE, COMPLETED, DROPPED
  progress      Int       @default(0)
  lastAccessedAt DateTime @default(now())
  enrollmentDate DateTime @default(now())
  completedAt   DateTime?

  @@index([studentId])
  @@index([courseId])
}

model Lesson {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  materialUrl String?
  sequenceOrder Int
  courseId    String    @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id])
  assignments Assignment[]
  submissions Submission[]
  quiz        Quiz?
  discussions Discussion[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([courseId])
}

model Assignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  dueDate     DateTime
  maxScore    Int
  lessonId    String    @db.ObjectId
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  submissions Submission[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([lessonId])
}

model Submission {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  fileUrl     String?
  score       Float?
  feedback    String?
  status      String    // "PENDING", "GRADED"
  userId      String    @db.ObjectId
  user        User      @relation("UserToSubmission", fields: [userId], references: [id])
  studentId   String    @db.ObjectId
  student     Student   @relation("StudentToSubmission", fields: [studentId], references: [id])
  assignmentId String   @db.ObjectId
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  lessonId    String    @db.ObjectId
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([studentId])
  @@index([assignmentId])
  @@index([lessonId])
}

model Quiz {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  timeLimit   Int?      // in minutes
  maxScore    Int
  lessonId    String    @unique @db.ObjectId
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  attempts    QuizAttempt[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QuizAttempt {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  score       Float
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  answers     Json      // Store answers as JSON
  studentId   String    @db.ObjectId
  student     Student   @relation(fields: [studentId], references: [id])
  quizId      String    @db.ObjectId
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([studentId])
  @@index([quizId])
}

model Discussion {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  authorId    String    @db.ObjectId
  author      User      @relation("UserToDiscussion", fields: [authorId], references: [id])
  lessonId    String    @db.ObjectId
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  replies     DiscussionReply[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
  @@index([lessonId])
}

model DiscussionReply {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  authorId      String    @db.ObjectId
  author        User      @relation("UserToDiscussionReply", fields: [authorId], references: [id])
  discussionId  String    @db.ObjectId
  discussion    Discussion @relation(fields: [discussionId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([authorId])
  @@index([discussionId])
}

model SystemLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String
  timestamp DateTime @default(now())
}