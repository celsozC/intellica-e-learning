// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String
  email             String            @unique
  password          String
  isActive          Boolean           @default(true)
  roleId            String?           @db.ObjectId
  role              Role?             @relation(fields: [roleId], references: [id])
  profileImage      String?           @default("/default-avatar.jpg")
  courses           Course[]          // Courses taught by the user
  discussions       Discussion[]      // Discussions created by the user
  discussionReplies DiscussionReply[] // Replies created by the user
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([roleId])
}

model Admin {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  email           String           @unique
  systemSettings  SystemSettings[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  actorType String
  actorId   String
  action    String
  description String
  createdAt DateTime @default(now())
}

model SystemSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId   String   @db.ObjectId
  key       String
  value     String
  admin     Admin    @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId])
}

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  specialization String
  bio String
  gender String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  dateOfBirth   DateTime
  gender        String
  enrollments   CourseEnrollment[]
  quizAttempts  QuizAttempt[]    // Add this relation
  submissions   Submission[]      // Add this relation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  teacherId   String       @db.ObjectId
  teacher     User         @relation(fields: [teacherId], references: [id])
  discussions Discussion[]
  enrollments CourseEnrollment[]
  lessons     Lesson[]     // Add this relation
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([teacherId])
}

model CourseEnrollment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId       String   @db.ObjectId
  courseId        String   @db.ObjectId
  student         Student  @relation(fields: [studentId], references: [id])
  course          Course   @relation(fields: [courseId], references: [id])
  enrollmentDate  DateTime
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([studentId])
  @@index([courseId])
}

model Discussion {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String            @db.ObjectId
  course      Course            @relation(fields: [courseId], references: [id])
  authorId    String            @db.ObjectId
  author      User              @relation(fields: [authorId], references: [id])
  title       String
  content     String
  replies     DiscussionReply[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([courseId])
  @@index([authorId])
}

model DiscussionReply {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  discussionId String     @db.ObjectId
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  authorId     String     @db.ObjectId
  author       User       @relation(fields: [authorId], references: [id])
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([discussionId])
  @@index([authorId])
}

model Lesson {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId      String   @db.ObjectId
  course        Course   @relation(fields: [courseId], references: [id])
  title         String
  content       String
  description   String
  materialUrl   String
  sequenceOrder Int
  quizzes       Quiz[]        // Add relation for quizzes
  assignments   Assignment[]  // Add relation for assignments
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([courseId])
}

model Quiz {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  lessonId    String        @db.ObjectId
  lesson      Lesson        @relation(fields: [lessonId], references: [id])
  title       String
  description String
  timeLimit   Int
  maxScore    Int
  attempts    QuizAttempt[]  // Add this relation
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([lessonId])
}

model QuizAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId      String   @db.ObjectId
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  studentId   String   @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id])
  score       Int
  startedAt   DateTime
  completedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([quizId])
  @@index([studentId])
}

model Assignment {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  lessonId    String       @db.ObjectId
  lesson      Lesson       @relation(fields: [lessonId], references: [id])
  title       String
  description String
  maxScore    Int
  dueDate     DateTime
  submissions Submission[]  // Add this relation
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([lessonId])
}

model Submission {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  assignmentId  String     @db.ObjectId
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  studentId     String     @db.ObjectId
  student       Student    @relation(fields: [studentId], references: [id])
  content       String
  attachmentUrl String
  score         Int
  feedback      String
  submittedAt   DateTime
  gradedAt      DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([assignmentId])
  @@index([studentId])
}